// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const PRECISION = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const VARYING = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const UUID = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const JSONB = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NOW = 57536
const NULLX = 57537
const AUTO_INCREMENT = 57538
const APPROXNUM = 57539
const SIGNED = 57540
const UNSIGNED = 57541
const ZEROFILL = 57542
const ZONE = 57543
const AUTOINCREMENT = 57544
const DATABASES = 57545
const TABLES = 57546
const VITESS_KEYSPACES = 57547
const VITESS_SHARDS = 57548
const VITESS_TABLETS = 57549
const VSCHEMA_TABLES = 57550
const EXTENDED = 57551
const FULL = 57552
const PROCESSLIST = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const WITHOUT = 57588
const PARSER = 57589
const QUERY = 57590
const EXPANSION = 57591
const UNUSED = 57592
const TYPECAST = 57593

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 78,
	-2, 68,
	-1, 36,
	151, 317,
	152, 317,
	-2, 307,
	-1, 248,
	108, 646,
	-2, 642,
	-1, 249,
	108, 647,
	-2, 643,
	-1, 319,
	79, 815,
	-2, 58,
	-1, 320,
	79, 773,
	-2, 59,
	-1, 325,
	79, 757,
	-2, 613,
	-1, 327,
	79, 794,
	-2, 615,
	-1, 612,
	51, 41,
	53, 41,
	-2, 43,
	-1, 743,
	108, 649,
	-2, 645,
	-1, 968,
	5, 28,
	-2, 449,
	-1, 993,
	5, 27,
	-2, 588,
	-1, 1075,
	5, 27,
	-2, 64,
	-1, 1262,
	5, 28,
	-2, 589,
	-1, 1321,
	5, 27,
	-2, 591,
	-1, 1396,
	5, 28,
	-2, 592,
}

const yyPrivate = 57344

const yyLast = 11515

var yyAct = [...]int{

	249, 1402, 909, 1279, 1386, 807, 246, 680, 825, 539,
	1332, 253, 1066, 1035, 1186, 1158, 848, 996, 1159, 1077,
	847, 1155, 227, 278, 903, 606, 221, 604, 854, 888,
	808, 324, 768, 1012, 66, 87, 1131, 779, 87, 53,
	960, 898, 1063, 861, 776, 622, 255, 1001, 252, 795,
	745, 471, 1268, 477, 426, 318, 621, 804, 608, 305,
	311, 593, 87, 87, 329, 306, 562, 483, 251, 329,
	222, 223, 224, 225, 491, 236, 87, 942, 87, 315,
	313, 1050, 877, 52, 87, 1195, 1433, 1414, 1430, 304,
	1394, 1376, 1067, 1068, 1427, 84, 910, 240, 567, 1413,
	1150, 843, 568, 1393, 1256, 538, 3, 553, 309, 1364,
	504, 503, 513, 514, 506, 507, 508, 509, 510, 511,
	512, 505, 435, 314, 515, 513, 514, 506, 507, 508,
	509, 510, 511, 512, 505, 515, 437, 515, 438, 1198,
	505, 1180, 876, 515, 445, 838, 1253, 508, 509, 510,
	511, 512, 505, 226, 778, 515, 499, 466, 502, 82,
	78, 79, 80, 1295, 517, 518, 519, 520, 521, 522,
	523, 277, 500, 501, 498, 504, 503, 513, 514, 506,
	507, 508, 509, 510, 511, 512, 505, 1181, 1182, 515,
	1294, 506, 507, 508, 509, 510, 511, 512, 505, 1052,
	87, 515, 839, 840, 329, 329, 329, 329, 710, 329,
	1252, 470, 623, 879, 624, 711, 329, 504, 503, 513,
	514, 506, 507, 508, 509, 510, 511, 512, 505, 1310,
	1020, 515, 1287, 1019, 889, 323, 1021, 881, 1343, 1286,
	430, 1210, 799, 329, 1209, 73, 1333, 504, 503, 513,
	514, 506, 507, 508, 509, 510, 511, 512, 505, 1335,
	447, 515, 899, 530, 531, 532, 533, 534, 535, 536,
	479, 503, 513, 514, 506, 507, 508, 509, 510, 511,
	512, 505, 1365, 1245, 515, 81, 563, 1243, 516, 220,
	1340, 451, 1429, 70, 71, 1425, 1282, 526, 1387, 516,
	1388, 516, 462, 463, 87, 1109, 805, 516, 72, 1193,
	1033, 87, 87, 87, 1423, 1318, 1392, 329, 565, 516,
	1038, 1039, 1040, 329, 1285, 68, 1334, 1220, 1043, 1041,
	275, 276, 1048, 1031, 1106, 1047, 1028, 1229, 480, 1355,
	440, 1221, 432, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 516, 453, 76, 455, 309, 826, 828,
	689, 889, 566, 429, 588, 516, 1011, 580, 564, 75,
	884, 76, 569, 612, 863, 323, 323, 323, 323, 1010,
	323, 1009, 436, 452, 454, 900, 199, 323, 864, 428,
	77, 1369, 1086, 613, 863, 516, 619, 863, 1110, 555,
	556, 557, 558, 559, 560, 561, 528, 529, 864, 1265,
	1118, 864, 976, 954, 493, 717, 495, 446, 937, 69,
	1280, 1281, 1283, 845, 844, 516, 1204, 720, 721, 329,
	87, 1107, 827, 1105, 973, 87, 714, 87, 329, 490,
	87, 581, 1374, 87, 1218, 1108, 999, 87, 516, 329,
	329, 329, 329, 329, 329, 329, 329, 1336, 489, 488,
	1132, 1087, 1083, 329, 329, 1088, 1085, 1084, 87, 72,
	625, 1114, 489, 488, 1045, 490, 1205, 1152, 698, 450,
	1089, 489, 488, 329, 489, 488, 1082, 87, 323, 490,
	679, 1154, 1134, 329, 627, 685, 938, 686, 490, 439,
	690, 490, 722, 693, 744, 1042, 796, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 746, 1339, 696, 752, 640, 743, 712, 683,
	636, 972, 1136, 971, 1141, 488, 1135, 329, 1133, 750,
	751, 749, 1037, 50, 1139, 747, 1113, 731, 1398, 489,
	488, 490, 485, 748, 1137, 1138, 1297, 724, 788, 791,
	796, 716, 983, 1296, 797, 1072, 490, 739, 1070, 1053,
	1140, 1142, 74, 741, 735, 737, 738, 1375, 1317, 736,
	442, 443, 444, 771, 431, 951, 952, 953, 87, 1292,
	1231, 87, 87, 87, 87, 87, 715, 773, 774, 1064,
	678, 809, 769, 87, 770, 1049, 87, 1372, 867, 323,
	87, 1192, 489, 488, 1191, 87, 87, 793, 1190, 329,
	323, 323, 323, 323, 323, 323, 323, 323, 801, 490,
	868, 1034, 329, 303, 323, 323, 21, 309, 309, 309,
	309, 309, 833, 1022, 874, 912, 865, 783, 806, 772,
	810, 866, 309, 813, 726, 433, 434, 811, 812, 695,
	814, 309, 694, 822, 493, 1416, 1437, 323, 830, 684,
	831, 1325, 1426, 470, 835, 682, 834, 836, 890, 891,
	892, 1416, 1415, 329, 448, 329, 441, 852, 87, 427,
	87, 427, 231, 87, 329, 1409, 470, 784, 785, 1348,
	57, 1347, 905, 792, 871, 1325, 1406, 1199, 775, 1325,
	1405, 783, 873, 872, 1325, 1404, 901, 902, 789, 789,
	1325, 1384, 1325, 1349, 789, 59, 60, 61, 62, 63,
	1325, 470, 1325, 1326, 1277, 1276, 832, 800, 615, 802,
	803, 1249, 470, 1177, 470, 997, 1096, 781, 932, 743,
	933, 1264, 470, 934, 1260, 863, 590, 957, 958, 959,
	857, 789, 862, 1217, 858, 859, 1213, 1212, 860, 864,
	1207, 1208, 943, 746, 944, 1207, 1206, 458, 504, 503,
	513, 514, 506, 507, 508, 509, 510, 511, 512, 505,
	323, 1211, 515, 869, 966, 470, 747, 590, 470, 870,
	956, 781, 470, 323, 632, 631, 998, 54, 1121, 880,
	1097, 23, 1023, 616, 837, 1099, 1092, 1093, 242, 1100,
	1095, 1094, 966, 1102, 1098, 595, 598, 599, 600, 596,
	329, 597, 601, 87, 1101, 1002, 1003, 1320, 589, 1156,
	1091, 321, 997, 618, 982, 966, 998, 590, 329, 1014,
	966, 1016, 978, 617, 323, 615, 323, 50, 975, 23,
	1015, 1006, 590, 329, 1024, 323, 268, 267, 270, 271,
	272, 273, 1215, 1214, 50, 269, 274, 718, 1431, 309,
	1411, 470, 991, 1017, 950, 992, 681, 997, 1379, 323,
	23, 1352, 1351, 1341, 977, 233, 1350, 1304, 881, 730,
	974, 904, 1029, 1030, 1032, 50, 1171, 87, 329, 1069,
	993, 329, 1054, 1055, 899, 1057, 1044, 504, 503, 513,
	514, 506, 507, 508, 509, 510, 511, 512, 505, 1026,
	894, 515, 965, 893, 481, 329, 50, 1065, 87, 87,
	65, 50, 1071, 1079, 1002, 1003, 87, 1338, 980, 906,
	907, 1216, 1080, 1156, 1027, 329, 516, 595, 598, 599,
	600, 596, 1005, 597, 601, 469, 692, 1073, 1127, 1128,
	467, 819, 817, 926, 1008, 1007, 820, 818, 816, 815,
	1422, 1145, 1146, 475, 1148, 1149, 925, 237, 238, 1412,
	1058, 1117, 1060, 1061, 1062, 329, 329, 1157, 1125, 939,
	1124, 1013, 484, 809, 1130, 1143, 1119, 1420, 743, 809,
	1144, 949, 948, 930, 1075, 482, 1160, 1059, 85, 323,
	1151, 219, 924, 630, 329, 449, 329, 329, 1167, 1165,
	472, 1258, 1305, 1179, 1036, 914, 1166, 279, 47, 691,
	908, 473, 1184, 243, 1183, 85, 85, 474, 478, 821,
	603, 599, 600, 484, 1178, 234, 235, 947, 228, 85,
	1358, 85, 1357, 229, 496, 946, 54, 85, 1308, 998,
	921, 918, 919, 486, 917, 1189, 1188, 1378, 1377, 1074,
	1366, 1046, 323, 329, 713, 47, 1202, 56, 58, 1081,
	1219, 1194, 329, 232, 321, 516, 614, 51, 540, 310,
	1162, 928, 931, 1, 87, 67, 323, 551, 1222, 1090,
	329, 911, 1076, 920, 1385, 1331, 1185, 1224, 855, 329,
	846, 425, 87, 64, 1373, 856, 323, 853, 633, 875,
	1051, 1227, 878, 1236, 639, 637, 638, 635, 1233, 1230,
	641, 634, 207, 316, 602, 923, 626, 487, 323, 1234,
	1104, 1103, 916, 1112, 709, 936, 1200, 1201, 465, 1203,
	209, 1241, 524, 789, 1226, 945, 1164, 1013, 309, 789,
	1018, 922, 329, 322, 329, 329, 329, 87, 329, 1259,
	1163, 719, 476, 85, 329, 1356, 1307, 981, 550, 1267,
	794, 254, 734, 1284, 266, 323, 263, 323, 1187, 265,
	1024, 1275, 1273, 264, 725, 990, 497, 244, 308, 586,
	927, 594, 592, 591, 1004, 329, 329, 87, 329, 329,
	329, 1000, 307, 1120, 1255, 929, 1270, 1271, 1272, 1363,
	329, 729, 25, 55, 239, 1302, 1291, 1301, 1293, 19,
	18, 457, 457, 457, 457, 17, 457, 20, 16, 15,
	14, 29, 13, 457, 1223, 12, 1311, 1312, 11, 1313,
	1314, 1315, 10, 1225, 9, 329, 329, 1298, 8, 1309,
	47, 7, 6, 742, 5, 4, 230, 1300, 329, 1319,
	22, 1228, 1330, 2, 1160, 525, 329, 85, 527, 0,
	323, 0, 1337, 0, 85, 610, 85, 0, 0, 1342,
	1344, 0, 0, 0, 1290, 329, 0, 732, 733, 0,
	0, 0, 0, 0, 0, 537, 0, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 329, 552, 554, 554,
	554, 554, 554, 554, 554, 554, 1367, 582, 583, 584,
	585, 0, 1371, 1269, 1160, 1269, 1269, 1269, 605, 1274,
	0, 329, 329, 329, 0, 323, 0, 1353, 0, 0,
	540, 0, 0, 786, 787, 0, 0, 1380, 1390, 1321,
	329, 0, 1395, 0, 0, 0, 0, 329, 809, 0,
	329, 1400, 1401, 0, 0, 456, 1269, 1299, 329, 323,
	323, 1303, 1407, 1345, 0, 1346, 321, 0, 0, 0,
	0, 1306, 0, 1381, 1382, 1383, 0, 0, 0, 849,
	1418, 0, 329, 85, 1419, 0, 0, 329, 85, 0,
	85, 0, 1417, 85, 87, 0, 85, 0, 1368, 0,
	697, 0, 329, 1434, 0, 0, 1323, 1324, 0, 1435,
	0, 0, 0, 0, 842, 0, 723, 0, 0, 1187,
	0, 85, 882, 883, 885, 886, 887, 1036, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	85, 895, 896, 897, 0, 457, 1269, 0, 0, 697,
	0, 0, 0, 0, 1428, 0, 457, 457, 457, 457,
	457, 457, 457, 457, 0, 742, 0, 1370, 0, 0,
	457, 457, 0, 0, 780, 782, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	798, 243, 1269, 1269, 1269, 0, 243, 243, 0, 0,
	790, 790, 243, 0, 940, 941, 790, 478, 789, 0,
	0, 1397, 0, 0, 0, 0, 0, 0, 1399, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 47, 243, 243, 243, 243,
	824, 85, 0, 790, 85, 85, 85, 85, 85, 541,
	0, 0, 1250, 1269, 0, 0, 823, 0, 1424, 85,
	459, 460, 461, 610, 464, 0, 0, 0, 85, 85,
	967, 468, 0, 1403, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 310, 310,
	310, 310, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 829, 0, 0, 0, 0,
	0, 0, 310, 504, 503, 513, 514, 506, 507, 508,
	509, 510, 511, 512, 505, 0, 0, 515, 0, 0,
	0, 85, 0, 85, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	457, 0, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 1123, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 968,
	969, 970, 0, 0, 1147, 0, 0, 0, 979, 0,
	0, 243, 0, 985, 1126, 0, 986, 987, 988, 989,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	955, 0, 0, 0, 504, 503, 513, 514, 506, 507,
	508, 509, 510, 511, 512, 505, 0, 0, 515, 0,
	0, 849, 1153, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 1168, 1169, 0,
	0, 1170, 0, 688, 1172, 0, 0, 0, 0, 0,
	0, 516, 0, 0, 699, 700, 701, 702, 703, 704,
	705, 706, 994, 995, 0, 0, 0, 0, 707, 708,
	0, 0, 1196, 504, 503, 513, 514, 506, 507, 508,
	509, 510, 511, 512, 505, 0, 0, 515, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 1123, 0, 0, 0,
	0, 961, 504, 503, 513, 514, 506, 507, 508, 509,
	510, 511, 512, 505, 0, 0, 515, 0, 0, 0,
	0, 1115, 1116, 0, 0, 0, 0, 0, 0, 85,
	0, 1129, 0, 1232, 0, 0, 0, 0, 0, 243,
	0, 0, 1238, 1239, 0, 1240, 47, 0, 0, 1242,
	243, 1244, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 849, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 457, 1257, 0, 790, 0, 0, 1176, 0,
	540, 790, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 849, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 504,
	503, 513, 514, 506, 507, 508, 509, 510, 511, 512,
	505, 0, 0, 515, 0, 0, 0, 0, 0, 0,
	1161, 516, 47, 205, 0, 0, 0, 0, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 1173, 1174, 1175,
	0, 0, 0, 0, 0, 0, 0, 215, 42, 0,
	0, 0, 28, 0, 0, 0, 0, 0, 913, 0,
	915, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	516, 37, 0, 1197, 0, 50, 0, 85, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 200, 0, 1246,
	1247, 1248, 0, 202, 1251, 0, 0, 0, 0, 0,
	208, 204, 0, 0, 0, 0, 0, 1261, 1262, 1263,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 33, 32, 35, 206,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 310,
	610, 0, 0, 1288, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 1389, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 1254, 201,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 203, 0, 211, 212, 213, 214, 218, 0,
	0, 0, 0, 217, 216, 0, 1327, 1328, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1359, 1360, 1361,
	1362, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	0, 0, 0, 0, 1396, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	790, 1408, 0, 0, 0, 0, 0, 0, 1161, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 85, 0, 414,
	404, 0, 375, 416, 352, 367, 424, 368, 369, 397,
	338, 383, 142, 364, 0, 355, 332, 361, 333, 353,
	377, 109, 351, 406, 386, 121, 422, 124, 391, 0,
	161, 133, 0, 0, 379, 408, 381, 402, 374, 398,
	343, 390, 417, 365, 394, 418, 0, 0, 0, 328,
	0, 850, 851, 0, 0, 0, 0, 1432, 101, 0,
	393, 413, 363, 396, 331, 392, 0, 336, 339, 423,
	411, 358, 359, 1025, 0, 0, 0, 0, 0, 0,
	378, 382, 399, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 389, 0, 0, 0, 340, 337,
	0, 376, 0, 0, 0, 342, 0, 357, 400, 0,
	330, 403, 409, 373, 186, 412, 371, 370, 148, 0,
	104, 0, 165, 113, 366, 122, 415, 380, 407, 354,
	362, 105, 360, 154, 143, 177, 388, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 334, 0, 162,
	179, 197, 198, 335, 350, 410, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 395, 155, 103, 178, 160, 346, 349, 344, 345,
	384, 385, 419, 420, 421, 401, 341, 0, 347, 348,
	0, 405, 387, 89, 96, 123, 193, 194, 0, 150,
	111, 180, 414, 404, 0, 375, 416, 352, 367, 424,
	368, 369, 397, 338, 383, 142, 364, 0, 355, 332,
	361, 333, 353, 377, 109, 351, 406, 386, 121, 422,
	124, 391, 0, 161, 133, 0, 0, 379, 408, 381,
	402, 374, 398, 343, 390, 417, 365, 394, 418, 0,
	0, 0, 328, 0, 850, 851, 0, 0, 0, 0,
	0, 101, 0, 393, 413, 363, 396, 331, 392, 0,
	336, 339, 423, 411, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 378, 382, 399, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 389, 0, 0,
	0, 340, 337, 0, 376, 0, 0, 0, 342, 0,
	357, 400, 0, 330, 403, 409, 373, 186, 412, 371,
	370, 148, 0, 104, 0, 165, 113, 366, 122, 415,
	380, 407, 354, 362, 105, 360, 154, 143, 177, 388,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 0,
	334, 0, 162, 179, 197, 198, 335, 350, 410, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 395, 155, 103, 178, 160, 346,
	349, 344, 345, 384, 385, 419, 420, 421, 401, 341,
	0, 347, 348, 0, 405, 387, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 414, 404, 0, 375, 416,
	352, 367, 424, 368, 369, 397, 338, 383, 142, 364,
	0, 355, 332, 361, 333, 353, 377, 109, 351, 406,
	386, 121, 422, 124, 391, 0, 161, 133, 0, 0,
	379, 408, 381, 402, 374, 398, 343, 390, 417, 365,
	394, 418, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 393, 413, 363, 396,
	331, 392, 0, 336, 339, 423, 411, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 378, 382, 399, 372,
	0, 0, 0, 0, 0, 0, 1122, 0, 356, 0,
	389, 0, 0, 0, 340, 337, 0, 376, 0, 0,
	0, 342, 0, 357, 400, 0, 330, 403, 409, 373,
	186, 412, 371, 370, 148, 0, 104, 0, 165, 113,
	366, 122, 415, 380, 407, 354, 362, 105, 360, 154,
	143, 177, 388, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 334, 0, 162, 179, 197, 198, 335,
	350, 410, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 395, 155, 103,
	178, 160, 346, 349, 344, 345, 384, 385, 419, 420,
	421, 401, 341, 0, 347, 348, 0, 405, 387, 89,
	96, 123, 193, 194, 0, 150, 111, 180, 414, 404,
	0, 375, 416, 352, 367, 424, 368, 369, 397, 338,
	383, 142, 364, 0, 355, 332, 361, 333, 353, 377,
	109, 351, 406, 386, 121, 422, 124, 391, 0, 161,
	133, 0, 0, 379, 408, 381, 402, 374, 398, 343,
	390, 417, 365, 394, 418, 50, 0, 0, 328, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 393,
	413, 363, 396, 331, 392, 0, 336, 339, 423, 411,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 378,
	382, 399, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 0, 389, 0, 0, 0, 340, 337, 0,
	376, 0, 0, 0, 342, 0, 357, 400, 0, 330,
	403, 409, 373, 186, 412, 371, 370, 148, 0, 104,
	0, 165, 113, 366, 122, 415, 380, 407, 354, 362,
	105, 360, 154, 143, 177, 388, 144, 153, 125, 169,
	149, 176, 187, 188, 167, 185, 156, 97, 139, 88,
	90, 166, 175, 102, 157, 93, 173, 163, 164, 131,
	117, 118, 159, 91, 92, 0, 152, 108, 147, 112,
	107, 141, 170, 171, 106, 196, 98, 183, 184, 95,
	99, 182, 138, 181, 168, 174, 132, 129, 94, 172,
	130, 128, 120, 0, 110, 114, 145, 127, 146, 115,
	135, 134, 136, 0, 140, 0, 334, 0, 162, 179,
	197, 198, 335, 350, 410, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	395, 155, 103, 178, 160, 346, 349, 344, 345, 384,
	385, 419, 420, 421, 401, 341, 0, 347, 348, 0,
	405, 387, 89, 96, 123, 193, 194, 0, 150, 111,
	180, 414, 404, 0, 375, 416, 352, 367, 424, 368,
	369, 397, 338, 383, 142, 364, 0, 355, 332, 361,
	333, 353, 377, 109, 351, 406, 386, 121, 422, 124,
	391, 0, 161, 133, 0, 0, 379, 408, 381, 402,
	374, 398, 343, 390, 417, 365, 394, 418, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 393, 413, 363, 396, 331, 392, 0, 336,
	339, 423, 411, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 378, 382, 399, 372, 0, 0, 0, 0,
	0, 0, 740, 0, 356, 0, 389, 0, 0, 0,
	340, 337, 0, 376, 0, 0, 0, 342, 0, 357,
	400, 0, 330, 403, 409, 373, 186, 412, 371, 370,
	148, 0, 104, 0, 165, 113, 366, 122, 415, 380,
	407, 354, 362, 105, 360, 154, 143, 177, 388, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 334,
	0, 162, 179, 197, 198, 335, 350, 410, 189, 190,
	191, 192, 0, 0, 0, 137, 100, 116, 158, 119,
	126, 151, 195, 395, 155, 103, 178, 160, 346, 349,
	344, 345, 384, 385, 419, 420, 421, 401, 341, 0,
	347, 348, 0, 405, 387, 89, 96, 123, 193, 194,
	0, 150, 111, 180, 414, 404, 0, 375, 416, 352,
	367, 424, 368, 369, 397, 338, 383, 142, 364, 0,
	355, 332, 361, 333, 353, 377, 109, 351, 406, 386,
	121, 422, 124, 391, 0, 161, 133, 0, 0, 379,
	408, 381, 402, 374, 398, 343, 390, 417, 365, 394,
	418, 0, 0, 0, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 393, 413, 363, 396, 331,
	392, 0, 336, 339, 423, 411, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 378, 382, 399, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 389,
	0, 0, 0, 340, 337, 0, 376, 0, 0, 0,
	342, 0, 357, 400, 0, 330, 403, 409, 373, 186,
	412, 371, 370, 148, 0, 104, 0, 165, 113, 366,
	122, 415, 380, 407, 354, 362, 105, 360, 154, 143,
	177, 388, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 334, 0, 162, 179, 197, 198, 335, 350,
	410, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 395, 155, 103, 178,
	160, 346, 349, 344, 345, 384, 385, 419, 420, 421,
	401, 341, 0, 347, 348, 0, 405, 387, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 414, 404, 0,
	375, 416, 352, 367, 424, 368, 369, 397, 338, 383,
	142, 364, 0, 355, 332, 361, 333, 353, 377, 109,
	351, 406, 386, 121, 422, 124, 391, 0, 161, 133,
	0, 0, 379, 408, 381, 402, 374, 398, 343, 390,
	417, 365, 394, 418, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 393, 413,
	363, 396, 331, 392, 0, 336, 339, 423, 411, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 378, 382,
	399, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 389, 0, 0, 0, 340, 337, 0, 376,
	0, 0, 0, 342, 0, 357, 400, 0, 330, 403,
	409, 373, 186, 412, 371, 370, 148, 0, 104, 0,
	165, 113, 366, 122, 415, 380, 407, 354, 362, 105,
	360, 154, 143, 177, 388, 144, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 334, 0, 162, 179, 197,
	198, 335, 350, 410, 189, 190, 191, 192, 0, 0,
	0, 137, 100, 116, 158, 119, 126, 151, 195, 395,
	155, 103, 178, 160, 346, 349, 344, 345, 384, 385,
	419, 420, 421, 401, 341, 0, 347, 348, 0, 405,
	387, 89, 96, 123, 193, 194, 0, 150, 111, 180,
	414, 404, 0, 375, 416, 352, 367, 424, 368, 369,
	397, 338, 383, 142, 364, 0, 355, 332, 361, 333,
	353, 377, 109, 351, 406, 386, 121, 422, 124, 391,
	0, 161, 133, 0, 0, 379, 408, 381, 402, 374,
	398, 343, 390, 417, 365, 394, 418, 0, 0, 0,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 393, 413, 363, 396, 331, 392, 0, 336, 339,
	423, 411, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 378, 382, 399, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 356, 0, 389, 0, 0, 0, 340,
	337, 0, 376, 0, 0, 0, 342, 0, 357, 400,
	0, 330, 403, 409, 373, 186, 412, 371, 370, 148,
	0, 104, 0, 165, 113, 366, 122, 415, 380, 407,
	354, 362, 105, 360, 154, 143, 177, 388, 144, 153,
	125, 169, 149, 176, 187, 188, 167, 185, 156, 97,
	139, 88, 90, 166, 175, 102, 157, 93, 173, 163,
	164, 131, 117, 118, 159, 91, 92, 0, 152, 108,
	147, 112, 107, 141, 170, 171, 106, 196, 98, 183,
	184, 95, 326, 182, 138, 181, 168, 174, 132, 129,
	94, 172, 130, 128, 120, 0, 110, 114, 145, 127,
	146, 115, 135, 134, 136, 0, 140, 0, 334, 0,
	162, 179, 197, 198, 335, 350, 410, 189, 190, 191,
	192, 0, 0, 0, 327, 325, 116, 158, 119, 126,
	151, 195, 395, 155, 103, 178, 160, 346, 349, 344,
	345, 384, 385, 419, 420, 421, 401, 341, 0, 347,
	348, 0, 405, 387, 89, 96, 123, 193, 194, 0,
	150, 111, 180, 414, 404, 0, 375, 416, 352, 367,
	424, 368, 369, 397, 338, 383, 142, 364, 0, 355,
	332, 361, 333, 353, 377, 109, 351, 406, 386, 121,
	422, 124, 391, 0, 161, 133, 0, 0, 379, 408,
	381, 402, 374, 398, 343, 390, 417, 365, 394, 418,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 393, 413, 363, 396, 331, 392,
	0, 336, 339, 423, 411, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 378, 382, 399, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 389, 0,
	0, 0, 340, 337, 0, 376, 0, 0, 0, 342,
	0, 357, 400, 0, 330, 403, 409, 373, 186, 412,
	371, 370, 148, 0, 104, 0, 165, 113, 366, 122,
	415, 380, 407, 354, 362, 105, 360, 154, 143, 177,
	388, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 334, 0, 162, 179, 197, 198, 335, 350, 410,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 395, 155, 103, 178, 160,
	346, 349, 344, 345, 384, 385, 419, 420, 421, 401,
	341, 0, 347, 348, 0, 405, 387, 89, 96, 123,
	193, 194, 0, 150, 111, 180, 414, 404, 0, 375,
	416, 352, 367, 424, 368, 369, 397, 338, 383, 142,
	364, 0, 355, 332, 361, 333, 353, 377, 109, 351,
	406, 386, 121, 422, 124, 391, 0, 161, 133, 0,
	0, 379, 408, 381, 402, 374, 398, 343, 390, 417,
	365, 394, 418, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 393, 413, 363,
	396, 331, 392, 0, 336, 339, 423, 411, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 378, 382, 399,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 389, 0, 0, 0, 340, 337, 0, 376, 0,
	0, 0, 342, 0, 357, 400, 0, 330, 403, 409,
	373, 186, 412, 371, 370, 148, 0, 104, 0, 165,
	113, 366, 122, 415, 380, 407, 354, 362, 105, 360,
	154, 143, 177, 388, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	620, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 326, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 334, 0, 162, 179, 197, 198,
	335, 350, 410, 189, 190, 191, 192, 0, 0, 0,
	327, 325, 116, 158, 119, 126, 151, 195, 395, 155,
	103, 178, 160, 346, 349, 344, 345, 384, 385, 419,
	420, 421, 401, 341, 0, 347, 348, 0, 405, 387,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 414,
	404, 0, 375, 416, 352, 367, 424, 368, 369, 397,
	338, 383, 142, 364, 0, 355, 332, 361, 333, 353,
	377, 109, 351, 406, 386, 121, 422, 124, 391, 0,
	161, 133, 0, 0, 379, 408, 381, 402, 374, 398,
	343, 390, 417, 365, 394, 418, 0, 0, 0, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	393, 413, 363, 396, 331, 392, 0, 336, 339, 423,
	411, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	378, 382, 399, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 389, 0, 0, 0, 340, 337,
	0, 376, 0, 0, 0, 342, 0, 357, 400, 0,
	330, 403, 409, 373, 186, 412, 371, 370, 148, 0,
	104, 0, 165, 113, 366, 122, 415, 380, 407, 354,
	362, 105, 360, 154, 143, 177, 388, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 317, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 326, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 334, 0, 162,
	179, 197, 198, 335, 350, 410, 189, 190, 191, 192,
	0, 0, 0, 327, 325, 320, 319, 119, 126, 151,
	195, 395, 155, 103, 178, 160, 346, 349, 344, 345,
	384, 385, 419, 420, 421, 401, 341, 0, 347, 348,
	0, 405, 387, 89, 96, 123, 193, 194, 0, 150,
	111, 180, 142, 0, 0, 777, 0, 250, 0, 0,
	0, 109, 247, 0, 0, 121, 289, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 248,
	268, 267, 270, 271, 272, 273, 0, 0, 101, 269,
	274, 275, 276, 0, 0, 245, 261, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	241, 0, 0, 0, 301, 0, 260, 0, 0, 256,
	257, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 299, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 0, 155, 103, 178, 160, 290, 300, 296, 297,
	294, 295, 293, 292, 291, 302, 282, 283, 284, 285,
	287, 0, 286, 89, 96, 123, 193, 194, 142, 150,
	111, 180, 298, 250, 0, 0, 0, 109, 247, 0,
	0, 121, 289, 124, 0, 0, 161, 133, 0, 0,
	0, 0, 280, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 470, 248, 268, 267, 270, 271,
	272, 273, 0, 0, 101, 269, 274, 275, 276, 0,
	0, 245, 261, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 0, 0, 0, 0,
	301, 0, 260, 0, 0, 256, 257, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 299, 148, 0, 104, 0, 165, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 154,
	143, 177, 0, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 0, 0, 162, 179, 197, 198, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 0, 155, 103,
	178, 160, 290, 300, 296, 297, 294, 295, 293, 292,
	291, 302, 282, 283, 284, 285, 287, 0, 286, 89,
	96, 123, 193, 194, 142, 150, 111, 180, 298, 250,
	0, 0, 0, 109, 247, 0, 0, 121, 289, 124,
	0, 0, 161, 133, 0, 0, 0, 0, 280, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 248, 268, 267, 270, 271, 272, 273, 0, 0,
	101, 269, 274, 275, 276, 0, 0, 245, 261, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 241, 0, 0, 0, 301, 0, 260, 0,
	0, 256, 257, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 299,
	148, 0, 104, 0, 165, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 154, 143, 177, 0, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 0,
	0, 162, 179, 197, 198, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 137, 100, 116, 158, 119,
	126, 151, 195, 0, 155, 103, 178, 160, 290, 300,
	296, 297, 294, 295, 293, 292, 291, 302, 282, 283,
	284, 285, 287, 0, 286, 89, 96, 123, 193, 194,
	142, 150, 111, 180, 298, 250, 0, 0, 0, 109,
	247, 0, 0, 121, 289, 124, 0, 0, 161, 133,
	0, 0, 0, 0, 280, 281, 0, 0, 0, 0,
	0, 0, 841, 0, 50, 0, 0, 248, 268, 267,
	270, 271, 272, 273, 0, 0, 101, 269, 274, 275,
	276, 0, 0, 245, 261, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 0, 0,
	0, 0, 301, 0, 260, 0, 0, 256, 257, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 299, 148, 0, 104, 0,
	165, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 154, 143, 177, 0, 144, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 0, 0, 162, 179, 197,
	198, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 137, 100, 116, 158, 119, 126, 151, 195, 0,
	155, 103, 178, 160, 290, 300, 296, 297, 294, 295,
	293, 292, 291, 302, 282, 283, 284, 285, 287, 23,
	286, 89, 96, 123, 193, 194, 0, 150, 111, 180,
	298, 142, 0, 0, 0, 0, 250, 0, 0, 0,
	109, 247, 0, 0, 121, 289, 124, 0, 0, 161,
	133, 0, 0, 0, 0, 280, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 248, 268,
	267, 270, 271, 272, 273, 0, 0, 101, 269, 274,
	275, 276, 0, 0, 245, 261, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 0,
	0, 0, 0, 301, 0, 260, 0, 0, 256, 257,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 299, 148, 0, 104,
	0, 165, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 154, 143, 177, 0, 144, 153, 125, 169,
	149, 176, 187, 188, 167, 185, 156, 97, 139, 88,
	90, 166, 175, 102, 157, 93, 173, 163, 164, 131,
	117, 118, 159, 91, 92, 0, 152, 108, 147, 112,
	107, 141, 170, 171, 106, 196, 98, 183, 184, 95,
	99, 182, 138, 181, 168, 174, 132, 129, 94, 172,
	130, 128, 120, 0, 110, 114, 145, 127, 146, 115,
	135, 134, 136, 0, 140, 0, 0, 0, 162, 179,
	197, 198, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 290, 300, 296, 297, 294,
	295, 293, 292, 291, 302, 282, 283, 284, 285, 287,
	0, 286, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 298, 250, 0, 0, 0, 109, 247, 0, 0,
	121, 289, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 248, 268, 267, 270, 271, 272,
	273, 0, 0, 101, 269, 274, 275, 276, 0, 0,
	245, 261, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 0, 0, 0, 0, 301,
	0, 260, 0, 0, 256, 257, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 299, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 0, 155, 103, 178,
	160, 290, 300, 296, 297, 294, 295, 293, 292, 291,
	302, 282, 283, 284, 285, 287, 0, 286, 89, 96,
	123, 193, 194, 142, 150, 111, 180, 298, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 289, 124, 0,
	0, 161, 133, 0, 0, 0, 0, 280, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	248, 268, 267, 270, 271, 272, 273, 0, 0, 101,
	269, 274, 275, 276, 0, 0, 0, 261, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 0, 0, 0, 0, 301, 0, 260, 0, 0,
	256, 257, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 299, 148,
	0, 104, 0, 165, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 154, 143, 177, 1436, 144, 153,
	125, 169, 149, 176, 187, 188, 167, 185, 156, 97,
	139, 88, 90, 166, 175, 102, 157, 93, 173, 163,
	164, 131, 117, 118, 159, 91, 92, 0, 152, 108,
	147, 112, 107, 141, 170, 171, 106, 196, 98, 183,
	184, 95, 99, 182, 138, 181, 168, 174, 132, 129,
	94, 172, 130, 128, 120, 0, 110, 114, 145, 127,
	146, 115, 135, 134, 136, 0, 140, 0, 0, 0,
	162, 179, 197, 198, 0, 0, 0, 189, 190, 191,
	192, 0, 0, 0, 137, 100, 116, 158, 119, 126,
	151, 195, 0, 155, 103, 178, 160, 290, 300, 296,
	297, 294, 295, 293, 292, 291, 302, 282, 283, 284,
	285, 287, 0, 286, 89, 96, 123, 193, 194, 142,
	150, 111, 180, 298, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 289, 124, 0, 0, 161, 133, 0,
	0, 0, 0, 280, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 248, 268, 267, 270,
	271, 272, 273, 0, 0, 101, 269, 274, 275, 276,
	0, 0, 0, 261, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 0, 0, 0,
	0, 301, 0, 260, 0, 0, 256, 257, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 299, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 0, 155,
	103, 178, 160, 290, 300, 296, 297, 294, 295, 293,
	292, 291, 302, 282, 283, 284, 285, 287, 0, 286,
	89, 96, 123, 193, 194, 142, 150, 111, 180, 298,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 161, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 504, 503, 513,
	514, 506, 507, 508, 509, 510, 511, 512, 505, 0,
	0, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 148, 0, 104, 0, 165, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 154, 143, 177, 0,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 0,
	0, 0, 162, 179, 197, 198, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 0, 155, 103, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 516, 142, 0, 0, 0,
	492, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 161, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 494, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 489, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 148, 0, 104, 0, 165, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 154, 143, 177,
	0, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 0, 0, 162, 179, 197, 198, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 609, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 611, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 0, 155, 103, 178, 160, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 89, 96, 123, 193, 194, 109, 150,
	111, 180, 121, 0, 124, 0, 0, 161, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 0, 155,
	103, 178, 160, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	89, 96, 123, 193, 194, 109, 150, 111, 180, 121,
	0, 124, 0, 0, 161, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 148, 0, 104, 0, 165, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 154, 143, 177,
	0, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 0, 0, 162, 179, 197, 198, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 142, 155, 103, 178, 160,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 161, 133, 0, 0, 89, 96, 123,
	193, 194, 0, 150, 111, 180, 0, 0, 0, 0,
	0, 0, 328, 0, 0, 727, 0, 0, 728, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 148, 0, 104, 0, 165, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 154, 143, 177, 0,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 0,
	0, 0, 162, 179, 197, 198, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 142, 155, 103, 178, 160, 0,
	0, 0, 0, 109, 629, 0, 0, 121, 0, 124,
	0, 0, 161, 133, 0, 0, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 0, 0, 0, 0, 0,
	0, 328, 0, 628, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	148, 0, 104, 0, 165, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 154, 143, 177, 0, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 0,
	0, 162, 179, 197, 198, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 137, 100, 116, 158, 119,
	126, 151, 195, 0, 155, 103, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 96, 123, 193, 194,
	142, 150, 111, 180, 609, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 161, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 611,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 148, 0, 104, 0,
	165, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 154, 143, 177, 0, 607, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 0, 0, 162, 179, 197,
	198, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 137, 100, 116, 158, 119, 126, 151, 195, 142,
	155, 103, 178, 160, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 161, 133, 0,
	0, 89, 96, 123, 193, 194, 0, 150, 111, 180,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 142, 155,
	103, 178, 160, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 161, 133, 0, 0,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 0,
	0, 0, 0, 0, 0, 86, 0, 611, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 148, 0, 104, 0, 165, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 154,
	143, 177, 0, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 0, 0, 162, 179, 197, 198, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 142, 155, 103,
	178, 160, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 89,
	96, 123, 193, 194, 0, 150, 111, 180, 0, 0,
	0, 0, 0, 0, 328, 0, 494, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 142, 155, 103, 178,
	160, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 161, 133, 0, 0, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 148, 0, 104, 0, 165, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 154, 143, 177,
	0, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 0, 0, 162, 179, 197, 198, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 687, 155, 103, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 0, 0, 0, 0,
	587, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 0, 155, 103, 178, 160, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 89, 96, 123, 193, 194, 109, 150,
	111, 180, 121, 0, 124, 0, 0, 161, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 142, 155,
	103, 178, 160, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 161, 133, 0, 0,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	186, 0, 0, 0, 148, 0, 104, 0, 165, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 154,
	143, 177, 0, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 0, 0, 162, 179, 197, 198, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 142, 155, 103,
	178, 160, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 89,
	96, 123, 193, 194, 0, 150, 111, 180, 0, 0,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 142, 155, 103, 178,
	160, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 161, 133, 0, 0, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 148, 0, 104, 0, 165, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 154, 143, 177,
	0, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 0, 0, 162, 179, 197, 198, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 142, 155, 103, 178, 160,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 161, 133, 0, 0, 89, 96, 123,
	193, 194, 0, 150, 111, 180, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 148, 0, 104, 0, 165, 113, 0, 122, 0,
	0, 0, 0, 659, 105, 0, 154, 143, 177, 0,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 645,
	0, 0, 162, 179, 197, 198, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 0, 155, 103, 178, 160, 0,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 0, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 0, 673, 674, 0,
	675, 676, 677, 661, 662, 663, 664, 642, 644, 0,
	580, 643, 646, 0, 657, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 658, 665, 666, 667, 668,
	669, 670, 671, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581,
}
var yyPact = [...]int{

	2033, -1000, -186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1051, 1082, -1000, -1000, -1000, -1000, -1000, -1000, 888,
	176, 249, 272, 42, 10490, 268, 2002, 10928, -1000, 130,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 884, -1000, -1000,
	-1000, -1000, -1000, 1041, 1047, 889, 1035, 949, -1000, 5776,
	233, 9131, 10271, 5034, -1000, 634, 270, 243, 10709, 219,
	219, 219, -1000, -129, 264, 10928, -1000, 10928, 217, 631,
	217, 217, 217, 10928, -1000, 309, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10928,
	629, 996, 236, 3193, 3193, 3193, 3193, 151, 3193, -70,
	920, -1000, -1000, -1000, -1000, 3193, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 619, 1011, 6519, 6519,
	1051, -1000, 884, -1000, -1000, -1000, 981, -1000, -1000, 489,
	1062, -1000, 7508, 308, -1000, 6519, 85, 822, -1000, -1000,
	822, -1000, -1000, 297, -1000, -1000, 7011, 7011, 7011, 7011,
	7011, 7011, 7011, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 822, -1000, 6273,
	822, 822, 822, 822, 822, 822, 822, 822, 6519, 822,
	822, 822, 822, 822, 822, 822, 822, 822, 181, 822,
	822, 822, 822, 10034, 809, 917, -1000, -1000, -1000, 1028,
	8228, 8912, 10928, 802, -1000, 790, 4771, -21, -1000, -1000,
	-1000, 391, 8666, -1000, -1000, -1000, 994, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 751, -1000, 11254, 10709, 10928,
	835, 620, 458, 614, 10928, -1000, 9788, 3193, 239, 10928,
	1016, 916, 10928, 607, 604, -1000, 4508, -1000, 3193, 3193,
	3193, 3193, 3193, 3193, 3193, 3193, -1000, -1000, -1000, -1000,
	-1000, -1000, 3193, 3193, -1000, -13, -1000, 10928, -1000, -1000,
	-1000, -1000, 1075, 347, 543, 307, 824, -1000, 403, 1041,
	619, 949, 8447, 858, -1000, -1000, 10928, -1000, 6519, 6519,
	508, -1000, 9569, -1000, -1000, 3456, 353, 7011, 491, 452,
	7011, 7011, 7011, 7011, 7011, 7011, 7011, 7011, 7011, 7011,
	7011, 7011, 7011, 7011, 7011, 547, 181, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 594, -1000, 884, 810, 810,
	31, 31, 31, 31, 31, 31, 7257, 5284, 619, 748,
	389, 6273, 5776, 5776, 6519, 6519, 11147, 11147, 5776, 1032,
	431, 389, 11147, -1000, 619, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 57, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5776, 5776, 5776, 5776, 163, 10928, -1000, 11147,
	9131, 9131, 9131, 9131, 9131, -1000, 939, 938, -1000, 932,
	931, 1009, 10928, -1000, 744, 8228, 310, 822, -1000, 9350,
	-1000, -1000, 163, 685, 9131, 10928, -1000, -1000, 4245, 790,
	-21, 761, -1000, -89, -34, 6022, 319, -1000, -1000, -1000,
	-1000, 2667, 636, 580, -128, -3, -1000, -1000, -1000, -1000,
	846, -1000, 846, 185, 846, 846, 846, 47, 47, 47,
	47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 881, 878,
	-1000, 846, 846, 846, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 862, 210, 862, 849, 849, 899, 1018,
	-166, 590, 3193, 1012, 3193, -1000, 958, 10928, -1000, 10928,
	-1000, -1000, 10928, 3193, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 407,
	-1000, -1000, -1000, -1000, 963, 6519, 6519, 3982, 6519, -1000,
	-1000, -1000, 1011, -1000, 1032, 1046, -1000, 980, 979, 5776,
	-1000, -1000, 353, 465, -1000, -1000, 519, -1000, -1000, -1000,
	-1000, 305, 822, -1000, 1919, -1000, -1000, -1000, -1000, 491,
	7011, 7011, 7011, 1763, 1919, 1812, 33, 180, 31, 51,
	51, 39, 39, 39, 39, 39, 97, 97, -1000, -1000,
	-1000, -1000, 619, -1000, -1000, -1000, 619, 5776, 769, -1000,
	-1000, 6519, -1000, 619, 741, 741, 480, 412, 847, -1000,
	304, 841, 741, 5776, 485, -1000, 6519, 619, -1000, -1000,
	741, 619, 741, 741, 853, 822, -1000, 834, -1000, 367,
	917, 894, 912, 785, -1000, -1000, -1000, -1000, 935, -1000,
	934, -1000, -1000, -1000, -1000, -1000, 262, 260, 247, 10709,
	-1000, 1057, 9131, 794, -1000, -1000, 761, -21, -5, -1000,
	-1000, -1000, 389, -1000, -1000, 588, 759, 2404, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 877, 904, 203, 275, 278,
	255, 576, 10709, -1000, -1000, -1000, 476, 263, 1072, -1000,
	-1000, 202, -1000, 199, 548, -1000, -190, -1000, -18, -1000,
	-1000, 511, 47, 47, 846, 47, -1000, -1000, 319, 988,
	319, 319, 319, 542, 542, -170, -170, -1000, -1000, 510,
	862, -1000, -1000, -1000, 507, -1000, 10928, 10709, 884, -1000,
	3719, -1000, -1000, -1000, -1000, -1000, -1000, 337, 691, 312,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 162, 282, -1000, 3193, -1000, 459, 10928, 10928, 954,
	389, 389, 302, -1000, -1000, 10928, -1000, -1000, -1000, -1000,
	797, -1000, -1000, -1000, 2930, 5776, -1000, 1763, 1919, 1694,
	-1000, 7011, 7011, -1000, -1000, 741, 5776, 389, -1000, -1000,
	-1000, 355, 547, 355, 7011, 7011, 3982, 7011, 7011, -159,
	792, 399, -1000, 6519, 415, -1000, -1000, -1000, -1000, -1000,
	903, 11147, 822, -1000, 7991, 10709, 1051, 11147, 6519, 6519,
	-1000, -1000, 6519, 854, -1000, 6519, -1000, -1000, -1000, 822,
	822, 822, 690, -1000, 1051, 794, -1000, -1000, -1000, -94,
	-52, -1000, -1000, 2667, -1000, 2667, 10709, 1066, -1000, 563,
	559, -1000, 556, -1000, -1000, 179, -1000, -1000, -183, -1000,
	-1000, -1000, 846, -1000, -1000, 822, -103, -1000, -1000, -1000,
	-1000, -1000, -1000, 653, 319, 319, 47, 319, -1000, 371,
	-1000, -1000, -1000, 722, -1000, 717, -1000, 65, 62, -1000,
	738, -1000, 713, 821, 901, -1000, 710, -1000, 365, -1000,
	208, -1000, 10709, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10709, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10928, -1000, -1000, -1000, -1000, -1000, 10709,
	211, -1000, -1000, 533, 6519, -1000, -1000, -1000, 3719, -1000,
	1057, 9131, -1000, -1000, 619, -1000, 7011, 1919, 1919, -1000,
	-1000, 619, 846, 846, -1000, 846, 849, -1000, -1000, 846,
	119, 846, 115, 619, 619, 688, 1563, -1000, 157, 127,
	822, -153, -1000, 389, 6519, -1000, 1004, 789, 701, -1000,
	-1000, 5530, 619, 698, 301, 690, 1041, -1000, 389, 389,
	389, 10709, 389, 10709, 10709, 10709, 7754, 10709, 1041, -1000,
	-1000, -1000, -1000, 2404, -1000, 681, -1000, 846, 267, 267,
	-1000, -1000, -1000, 191, -1000, 52, -1000, 619, 846, -1000,
	-1000, -1000, 319, -1000, -1000, -1000, 47, 532, 47, -28,
	-55, 505, -1000, 498, 10709, 10709, 10928, 3719, 2667, 10709,
	-1000, -1000, -1000, 845, -1000, -1000, -1000, -1000, 1006, 10709,
	-1000, -1000, 389, 1055, 703, -1000, 1919, -1000, -1000, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7011,
	7011, -1000, 7011, 7011, 7011, 619, 521, 389, 182, -1000,
	822, -1000, -1000, 805, 10709, 10709, -1000, -1000, 679, -1000,
	677, 677, 677, 310, -1000, -1000, 195, 10709, -1000, 897,
	-1000, -1000, 457, 134, 843, 10709, 53, -170, -1000, -1000,
	-1000, 319, -1000, 319, -1000, -1000, 647, 645, 669, 844,
	840, -1000, -1000, 839, 10709, 822, 215, 1048, 1044, -1000,
	-1000, 827, 827, 827, 827, 20, -1000, -1000, 1071, -1000,
	822, -1000, 884, 283, -1000, 10709, -1000, -1000, -1000, -1000,
	-1000, 195, -1000, 552, 363, 520, -173, -1000, 1069, -1000,
	-1000, 1067, 836, -1000, -1000, -1000, -1000, -1000, -1000, 1057,
	10709, 10709, 10709, 667, 155, 167, -1000, 6519, 6519, -1000,
	-1000, -1000, -1000, 619, 56, -175, 11147, 701, 619, 10709,
	-1000, -1000, -1000, 490, -1000, -1000, 10709, 267, 267, 10709,
	-1000, 661, 656, 652, 835, 642, -1000, 10709, 828, 389,
	694, -1000, 952, -162, -179, 692, -1000, -1000, -1000, -1000,
	-1000, -1000, 628, -1000, 1057, -1000, -1000, -166, -1000, 155,
	975, 10709, -1000, 943, -1000, 187, 10709, -1000, -1000, -1000,
	150, 618, -168, 10928, -1000, 146, -1000, -177, 826, 822,
	-180, 10709, 6765, -1000, 612, 827, 619, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1283, 105, 636, 1280, 1276, 1275, 1274, 1272, 1271,
	1268, 1264, 1262, 1258, 1255, 1252, 1251, 1250, 1249, 1248,
	1247, 1245, 1240, 1239, 700, 1234, 1233, 1232, 67, 1231,
	75, 1229, 1224, 40, 154, 44, 37, 818, 1223, 27,
	59, 65, 1222, 47, 1221, 1214, 80, 1213, 61, 1212,
	1211, 60, 1209, 1208, 8, 17, 1207, 48, 1206, 1205,
	68, 6, 1204, 1203, 1199, 1196, 1194, 1192, 50, 9,
	15, 23, 18, 1191, 46, 11, 1190, 49, 1188, 1187,
	1186, 1185, 39, 1182, 53, 1181, 22, 51, 1180, 52,
	57, 33, 21, 5, 79, 56, 1173, 30, 55, 45,
	1170, 1165, 572, 1162, 1160, 1158, 1155, 1154, 1153, 499,
	584, 1152, 1151, 1150, 31, 0, 171, 777, 74, 1147,
	34, 1146, 983, 77, 58, 25, 1144, 26, 1385, 32,
	1143, 1142, 36, 66, 1141, 102, 98, 1140, 1137, 1136,
	1135, 1134, 809, 29, 101, 1132, 1130, 1129, 12, 41,
	24, 42, 54, 1128, 1127, 28, 1125, 3, 13, 1,
	43, 1124, 1123, 1121, 1120, 20, 16, 1118, 14, 1116,
	10, 1115, 1114, 4, 1113, 19, 1112, 2, 1111, 7,
	1109, 1105, 1103, 1097, 1037, 965, 1096, 1091, 1090, 1089,
	1088, 107,
}
var yyR1 = [...]int{

	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 186,
	186, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 120, 120,
	179, 179, 178, 177, 177, 176, 176, 175, 181, 181,
	16, 162, 163, 163, 163, 163, 152, 134, 134, 134,
	134, 134, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 187, 187, 187, 138, 138, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 139, 139, 139, 139, 139, 135, 135, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 141, 141, 141, 141, 151, 151, 142, 142,
	149, 149, 150, 150, 150, 148, 148, 148, 145, 145,
	146, 146, 147, 147, 147, 143, 143, 143, 144, 144,
	144, 154, 154, 171, 171, 170, 170, 170, 170, 161,
	161, 167, 167, 167, 167, 167, 167, 167, 160, 160,
	169, 169, 168, 155, 155, 155, 155, 155, 156, 157,
	157, 157, 157, 158, 158, 159, 159, 164, 164, 164,
	165, 165, 165, 166, 166, 166, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 188,
	188, 189, 189, 189, 189, 189, 189, 189, 174, 172,
	172, 173, 173, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 107, 107, 104, 104, 105,
	105, 106, 106, 106, 108, 108, 108, 131, 131, 131,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 190, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 119, 119, 119, 118, 118, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 126, 126, 125, 125, 125, 124, 124,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 103, 103, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 191, 191, 66, 66, 66, 66, 31, 31, 31,
	31, 31, 129, 129, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 133,
	133, 133, 133, 133, 133, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 97, 94, 94,
	98, 98, 98, 96, 96, 96, 121, 121, 121, 101,
	101, 109, 109, 110, 110, 102, 102, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	113, 113, 116, 116, 117, 117, 122, 122, 123, 123,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 184, 185, 127, 128,
	128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 0, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 2,
	4, 4, 1, 3, 3, 3, 2, 3, 1, 1,
	1, 1, 2, 2, 3, 4, 3, 3, 3, 4,
	3, 5, 2, 2, 3, 2, 3, 2, 3, 3,
	5, 0, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 3, 3, 2, 1, 1, 1, 4,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 5, 4, 1, 2, 2, 3, 2, 3, 0,
	1, 2, 3, 3, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 1, 4, 4, 7, 7, 13, 1,
	1, 2, 2, 0, 1, 1, 3, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 11, 13, 7,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 6, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -182, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -184, 8, 251,
	52, -183, 269, -82, 15, -26, 5, -24, -190, -24,
	-24, -24, -24, -24, -162, 52, -120, -181, 149, 243,
	117, 118, 132, 69, -102, 120, 122, 118, 118, 119,
	120, 243, 117, 118, -51, -122, 55, -115, 156, 259,
	157, 170, 171, 162, 195, 186, 260, 154, 183, 187,
	230, 64, 160, 239, 126, 137, 181, 177, 174, 27,
	201, 266, 176, 129, 202, 206, 231, 167, 168, 233,
	199, 31, 131, 261, 33, 145, 234, 204, 198, 194,
	197, 166, 193, 37, 208, 207, 209, 229, 189, 155,
	211, 178, 18, 140, 143, 203, 205, 175, 124, 147,
	265, 235, 173, 144, 139, 238, 153, 161, 232, 169,
	241, 36, 215, 164, 165, 128, 158, 151, 191, 146,
	179, 180, 196, 163, 192, 159, 148, 141, 240, 216,
	267, 190, 188, 184, 185, 152, 120, 149, 150, 222,
	223, 224, 225, 262, 263, 236, 182, 217, 218, 118,
	105, 187, 111, 220, 119, 31, 147, -131, 118, -104,
	150, 222, 223, 224, 225, 55, 232, 231, 226, -122,
	159, -127, -127, -127, -127, -127, -2, -86, 17, 16,
	-5, -3, -184, 6, 20, 21, -30, 38, 39, -25,
	-36, 96, -37, -122, -56, 71, -61, 28, 55, -115,
	23, -60, -57, -75, -73, -74, 105, 106, 94, 95,
	102, 72, 107, -65, -63, -64, -66, 57, 56, 65,
	58, 59, 60, 61, 66, 67, 68, -116, -71, -184,
	42, 43, 252, 253, 254, 255, 258, 256, 74, 32,
	242, 250, 249, 248, 246, 247, 244, 245, 268, 123,
	243, 100, 251, -102, -39, -40, -41, -42, -53, -74,
	-184, -51, 11, -46, -51, -94, -130, 159, -98, 232,
	231, -117, -96, -116, -114, 230, 187, 229, 55, -115,
	116, 70, 22, 24, 213, 219, 73, 105, 16, 74,
	104, 252, 111, 46, 244, 245, 242, 254, 255, 243,
	220, 28, 10, 25, 135, 21, 98, 113, 77, 78,
	138, 23, 136, 68, 19, 49, 130, 11, 13, 14,
	123, 122, 89, 119, 44, 8, 107, 26, 86, 40,
	133, 42, 87, 17, 246, 247, 30, 258, 142, 100,
	47, 34, 71, 66, 50, 237, 69, 15, 45, 88,
	114, 251, 43, 117, 6, 257, 29, 134, 41, 118,
	221, 76, 121, 67, 5, 132, 9, 48, 51, 248,
	249, 250, 32, 75, 12, -163, -152, 55, 119, 120,
	-116, -110, 123, -110, -110, 251, 118, -51, -51, -109,
	123, 55, -109, -109, -109, -51, 108, -51, 55, 29,
	243, 55, 147, 118, 148, 120, -128, -184, -117, -128,
	-128, -128, 151, 152, -128, -105, 227, 50, -128, -185,
	54, -87, 19, 30, -37, -122, -83, -84, -37, -82,
	-2, -24, 34, -28, 21, 63, 11, -119, 70, 69,
	86, -118, 22, -116, 57, 108, -37, -58, 89, 71,
	87, 88, 73, 91, 90, 101, 94, 95, 96, 97,
	98, 99, 100, 92, 93, 104, 268, 79, 80, 81,
	82, 83, 84, 85, -103, -184, -74, -184, 109, 110,
	-61, -61, -61, -61, -61, -61, -61, -184, -2, -69,
	-37, -184, -184, -184, -184, -184, -184, -184, -184, -184,
	-78, -37, -184, -191, -184, -191, -191, -191, -191, -191,
	-191, -191, -133, 105, 187, 137, 181, -136, -135, 191,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	186, 260, -184, -184, -184, -184, -52, 26, -51, 29,
	53, -47, -49, -48, -50, 40, 44, 46, 41, 42,
	43, 47, -126, 22, -39, -184, -125, 143, -124, 22,
	-122, 57, -51, -46, -186, 53, 11, 51, 53, -94,
	159, -95, -99, 233, 235, 79, -121, -116, 57, 28,
	29, 54, 53, -153, -134, -138, -135, -140, -139, -141,
	-136, -137, 183, 187, 184, 105, 188, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 190, 201, 29,
	137, 179, 180, 181, 182, 202, 203, 204, 205, 206,
	207, 208, 209, 173, 174, 176, 177, 178, -116, -51,
	-179, 51, 55, 71, 55, -51, -51, 237, -128, 121,
	-51, 23, 50, -51, 55, 55, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -107,
	221, 228, -51, 9, 89, 53, 18, 108, 53, -85,
	24, 25, -86, -185, -30, -62, -116, 58, 61, -29,
	41, -51, -37, -37, -67, 66, 71, 67, 68, -118,
	96, -123, -117, -114, -61, -68, -71, -74, 62, 89,
	87, 88, 73, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -129, 55,
	57, -133, 55, -60, -60, -116, -35, 21, -34, -36,
	-185, 53, -185, -2, -34, -34, -37, -37, -75, -116,
	-122, -75, -34, -28, -76, -77, 75, -75, -185, 185,
	-34, -35, -34, -34, -90, 143, -51, -93, -97, -75,
	-40, -41, -41, -40, -41, 40, 40, 40, 45, 40,
	45, 40, -48, -122, -185, -54, 48, 122, 49, -184,
	-124, -90, 51, -39, -51, -98, -95, 53, 234, 236,
	237, 50, -37, -144, 105, 104, -164, -165, -166, -117,
	57, 58, -152, -154, -155, -167, -156, 124, 128, 129,
	132, -160, 126, 119, 133, 66, 71, 28, 50, 213,
	219, 124, 133, 132, 64, -147, 270, 210, -145, 216,
	-142, 52, -142, -142, 185, -142, -142, -142, -143, 187,
	-143, -143, -143, 52, 52, -142, -142, -142, -149, 52,
	175, -149, -149, -150, 52, -150, 50, 51, 22, -177,
	262, -178, 55, -128, 23, -128, -111, 116, 113, 114,
	-174, 112, 213, 187, 64, 28, 15, 252, 143, 267,
	55, 144, -51, -51, -51, -128, -106, 11, 89, 36,
	-37, -37, -123, -84, -87, -101, 19, 11, 32, 32,
	-34, 66, 67, 68, 108, -184, -68, -61, -61, -61,
	-33, 138, 70, -185, -185, -34, 53, -37, -185, -185,
	-185, 53, 51, 22, 53, 11, 108, 53, 11, -185,
	-34, -79, -77, 77, -37, -185, -185, -185, -185, -185,
	-59, 29, 32, -2, -184, -184, -55, 53, 12, 79,
	-44, -43, 50, 51, -45, 50, -43, 40, 40, 119,
	119, 119, -91, -116, -55, -39, -55, -99, -100, 238,
	235, 241, 55, 53, -166, 79, 52, 50, 133, -160,
	-160, 55, -160, 55, 55, -158, -116, 66, 57, 58,
	59, 66, 242, 65, -57, 211, 9, 133, 133, 57,
	271, -146, 217, 58, -143, -143, -142, -143, -144, 29,
	-144, -144, -144, -151, 57, -151, -148, 262, 263, -148,
	58, -149, 58, -51, -116, -2, -176, -175, -117, -127,
	-120, -189, 149, 125, 130, 129, 55, 124, 128, 143,
	-180, 149, 125, 126, 130, 129, 55, 119, 133, 124,
	128, 143, 132, -112, -113, 121, 22, 119, 133, 143,
	116, -128, -108, 87, 12, -122, -122, 37, 108, -51,
	-38, 11, 96, -117, -35, -33, 70, -61, -61, -185,
	-36, -132, 105, 183, 137, 181, 177, 199, 200, 189,
	215, 179, 216, -129, -132, -61, -61, -117, -61, -61,
	259, -82, 78, -37, 76, -92, 50, -93, -70, -72,
	-71, -184, -2, -88, -116, -91, -82, -97, -37, -37,
	-37, 52, -37, -184, -184, -184, -185, 53, -82, -55,
	235, 239, 240, -165, -166, -169, -168, -116, 10, 9,
	55, 55, 55, 130, -187, 268, -142, -184, 242, 54,
	-144, -144, -143, -144, 55, 105, 54, 53, 54, 179,
	179, 53, 54, 53, 52, 51, 50, 53, 79, -188,
	119, 133, -127, -116, -127, -116, -51, -127, -116, 126,
	-155, 57, -37, -55, -39, -185, -61, -185, -142, -142,
	-142, -150, -142, 168, -142, 168, -185, -185, -185, 53,
	19, -185, 53, 19, -184, -32, 257, -37, 27, -92,
	53, -185, -185, -185, 53, 108, -185, -86, -89, -116,
	-89, -89, -89, -125, -116, -86, 54, 53, -142, -157,
	153, 154, 29, 155, -157, 133, 187, 180, -185, -142,
	-144, -143, 57, -143, 218, 218, 58, 58, -89, -116,
	-51, -175, -166, -116, 52, 26, -116, -80, 13, -143,
	55, -61, -61, -61, -61, -61, -185, 57, 133, -72,
	32, -2, -184, -116, -116, 53, 54, -185, -185, -185,
	-54, -171, -170, 51, 131, 64, 262, -168, 50, 66,
	156, 50, -158, 185, -148, -144, -144, 54, 54, 54,
	52, 52, 52, -89, -184, 124, -81, 14, 16, -185,
	-185, -185, -185, -31, 89, 262, 9, -70, -2, 108,
	-116, -170, 55, -161, 79, 57, 264, 9, 10, 52,
	-55, -89, -89, -89, 54, -172, -173, 143, 133, -37,
	-69, -185, 260, 47, 265, -93, -185, -116, 58, -116,
	-157, -157, -159, -116, 54, 54, 54, -179, -185, 53,
	-116, 52, 37, 261, 266, 54, 53, -55, -177, -173,
	32, -89, 37, 127, -116, 145, 54, 262, -51, 146,
	265, 52, -184, 266, -159, -61, 142, 54, -185, -185,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 572, 0, 331, 331, 331, 331, 331, 331, 0,
	-2, 625, 0, 0, 0, 0, -2, 321, 322, 0,
	324, 325, 858, 858, 858, 858, 858, 0, 33, 34,
	856, 1, 3, 580, 0, 0, 335, 338, 333, 0,
	625, 0, 0, 0, 60, 0, 0, 0, 0, 623,
	623, 623, 69, 0, 0, 0, 626, 0, 621, 0,
	621, 621, 621, 0, 280, 402, 646, 647, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 0,
	0, 0, 0, 859, 859, 859, 859, 0, 859, 309,
	298, 300, 301, 302, 303, 859, 318, 319, 308, 320,
	323, 326, 327, 328, 329, 330, 27, 584, 0, 0,
	572, 29, 0, 331, 336, 337, 341, 339, 340, 332,
	0, 349, 353, 0, 410, 0, 415, 417, -2, -2,
	0, 452, 453, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 480, 481, 482, 483, 557, 558, 559,
	560, 561, 562, 563, 564, 419, 420, 554, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 545, 0,
	511, 511, 511, 511, 511, 511, 511, 511, 0, 0,
	0, 0, 0, 0, 0, 360, 362, 363, 364, 383,
	0, 385, 0, 0, 41, 45, 0, 832, 608, -2,
	-2, 0, 0, 644, 645, -2, 756, -2, 642, 643,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 0, 82, 0, 0, 0,
	70, 0, 0, 0, 0, 79, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 281, 859, 859,
	859, 859, 859, 859, 859, 859, 290, 860, 861, 291,
	292, 293, 859, 859, 295, 0, 310, 0, 304, 28,
	857, 22, 0, 0, 581, 0, 573, 574, 577, 580,
	27, 338, 0, 343, 342, 334, 0, 350, 0, 0,
	0, 354, 0, 356, 357, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 438, 439,
	440, 441, 442, 443, 416, 0, 430, 0, 0, 0,
	472, 473, 474, 475, 476, 477, 0, 345, 27, 0,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 546, 0, 502, 0, 503, 504, 505, 506, 507,
	508, 509, 510, 538, 0, 540, 541, 542, 543, 544,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	137, 138, 0, 345, 0, 0, 43, 0, 401, 0,
	0, 0, 0, 0, 0, 390, 0, 0, 393, 0,
	0, 0, 0, 384, 0, 0, 404, 801, 386, 0,
	388, 389, -2, 0, 0, 0, 39, 40, 0, 46,
	832, 48, 49, 0, 0, 0, 188, 616, 617, 618,
	614, 227, 0, 86, 182, 178, 88, 89, 90, 91,
	168, 115, 168, 168, 168, 168, 168, 185, 185, 185,
	185, 149, 150, 151, 152, 153, 154, 155, 0, 0,
	132, 168, 168, 168, 136, 158, 159, 160, 161, 162,
	163, 164, 165, 170, 170, 170, 172, 172, 0, 0,
	73, 0, 859, 0, 859, 80, 0, 0, 246, 0,
	274, 622, 0, 859, 277, 278, 403, 648, 649, 282,
	283, 284, 285, 286, 287, 288, 289, 294, 297, 311,
	305, 306, 299, 585, 0, 0, 0, 0, 0, 576,
	578, 579, 584, 30, 341, 0, 565, 0, 0, 0,
	344, 25, 411, 412, 414, 431, 0, 433, 435, 355,
	351, 0, 555, -2, 421, 422, 446, 447, 448, 0,
	0, 0, 0, 444, 426, 0, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 471, 522,
	523, 479, 0, 469, 470, 478, 0, 0, 346, 347,
	449, 0, 603, 27, 0, 0, 0, 0, 0, 554,
	0, 0, 0, 0, 552, 549, 0, 0, 512, 539,
	0, 0, 0, 0, 0, 0, 400, 408, 605, 0,
	361, 379, 381, 0, 376, 391, 392, 394, 0, 396,
	0, 398, 399, 365, 366, 367, 0, 0, 0, 0,
	387, 408, 0, 408, 42, 609, 47, 0, 0, 52,
	53, 610, 611, 612, 189, 0, 81, 228, 230, 233,
	234, 235, 83, 84, 85, 0, 213, 0, 0, 0,
	0, 0, 223, 208, 209, 93, 0, 0, 0, 102,
	103, 0, 105, 107, 0, 92, 0, 184, 180, 179,
	114, 0, 185, 185, 168, 185, 143, 144, 188, 0,
	188, 188, 188, 0, 0, 175, 175, 135, 126, 0,
	170, 128, 129, 130, 0, 131, 0, 0, 0, 65,
	0, 71, 72, 66, 624, 67, 858, 68, 0, 637,
	247, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 0, 0, 273, 859, 276, 314, 0, 0, 0,
	582, 583, 0, 575, 23, 0, 619, 620, 566, 567,
	358, 432, 434, 436, 0, 345, 423, 444, 427, 0,
	424, 0, 0, 418, 484, 0, 0, 451, -2, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	572, 0, 550, 0, 0, 501, 513, 514, 515, 516,
	597, 0, 0, -2, 0, 0, 572, 0, 0, 0,
	373, 380, 0, 0, 374, 0, 375, 395, 397, 0,
	0, 0, 0, 371, 572, 408, 38, 50, 51, 0,
	0, 57, 190, 0, 231, 0, 0, 0, 201, 0,
	0, 204, 0, 206, 207, 0, 224, 94, 111, 96,
	97, 98, 168, 100, 109, 0, 0, 104, 106, 108,
	183, 87, 181, 0, 188, 188, 185, 188, 145, 0,
	146, 147, 148, 0, 166, 0, 133, 0, 0, 134,
	0, 127, 0, 0, 0, -2, 74, 75, 0, 236,
	0, 858, 0, 261, 262, 263, 264, 265, 266, 267,
	858, 0, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 858, 638, 639, 640, 641, 0,
	0, 275, 296, 0, 0, 312, 313, 586, 0, 24,
	408, 0, 352, 556, 0, 425, 0, 445, 428, 485,
	348, 0, 168, 168, 527, 168, 172, 530, 531, 168,
	533, 168, 536, 0, 0, 0, 0, 555, 0, 0,
	0, 547, 500, 553, 0, 31, 0, 597, 587, 599,
	601, 0, 27, 0, 593, 0, 580, 606, 409, 607,
	377, 0, 382, 0, 0, 0, 385, 0, 580, 37,
	54, 55, 56, 229, 232, 0, 210, 168, 0, 0,
	202, 203, 205, 0, 95, 0, 99, 0, 168, 169,
	139, 140, 188, 141, 186, 187, 185, 0, 185, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 240, 0, 241, 243, 244, 245, 0, 223,
	239, 315, 316, 568, 359, 486, 429, 489, 524, 185,
	528, 529, 532, 534, 535, 537, 491, 490, 492, 0,
	0, 495, 0, 0, 0, 0, 0, 551, 0, 32,
	0, 602, -2, 0, 0, 0, 44, 35, 0, 369,
	0, 0, 0, 404, 372, 36, 192, 0, 212, 214,
	219, 220, 0, 0, 215, 223, 0, 175, 110, 101,
	142, 188, 167, 188, 176, 177, 0, 0, 0, 0,
	0, 76, 77, 0, 0, 0, 224, 570, 0, 525,
	526, 0, 0, 0, 0, 517, 499, 548, 0, 600,
	0, -2, 0, 595, 594, 0, 378, 405, 406, 407,
	368, 191, 193, 0, 199, 0, 0, 211, 0, 221,
	222, 0, 0, 112, 113, 156, 157, 171, 174, 408,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 493,
	494, 496, 497, 0, 0, 0, 0, 590, 27, 0,
	370, 194, 195, 0, 200, 197, 0, 0, 0, 0,
	61, 0, 0, 0, 70, 0, 269, 0, 0, 571,
	569, 498, 0, 0, 0, 598, -2, 596, 196, 198,
	216, 217, 0, 225, 408, 62, 237, 73, 268, 0,
	0, 0, 518, 0, 521, 0, 0, 63, 242, 270,
	0, 0, 519, 0, 226, 0, 238, 0, 0, 0,
	0, 0, 0, 520, 0, 0, 0, 218, 271, 272,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 269,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 270, 3, 271, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:347
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:359
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:365
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:372
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:382
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:392
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:399
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:411
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:433
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:452
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:470
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:498
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:540
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:546
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:582
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:605
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:626
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:631
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:641
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:657
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:673
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:677
		{
			yyVAL.bytes = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:683
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:690
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:697
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:702
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:710
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:716
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:721
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:743
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:748
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:753
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:758
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:768
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:773
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:783
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:793
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyDollar[1].columnType.ParserMode = ParserModeSQLite3
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:799
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:809
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:814
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:819
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:840
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:845
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1076
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1081
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1086
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1090
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1095
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1099
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1107
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1111
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1117
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1129
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1138
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1142
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1147
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1151
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1156
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1164
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1169
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1177
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1182
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1186
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1196
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1200
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1206
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1210
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1220
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1225
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1235
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1249
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1253
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1275
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1279
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1285
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1289
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1302
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1308
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1320
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 218:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1328
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1340
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1344
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1348
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1352
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1357
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1364
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1368
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1373
		{
			yyVAL.str = ""
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1377
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1389
		{
			yyVAL.str = yyDollar[1].str
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1393
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1403
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1407
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1411
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1417
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1421
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 238:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1435
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1449
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1458
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1462
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1466
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1479
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1489
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1494
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1499
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1503
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1535
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1541
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1545
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1551
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1555
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1561
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1567
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1575
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1580
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1588
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1592
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1598
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1602
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1607
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1662
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1670
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1730
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1734
		{
			yyVAL.str = "extended "
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1740
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1744
		{
			yyVAL.str = "full "
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1750
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1754
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1758
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1764
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1768
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1772
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1778
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1782
		{
			yyVAL.str = SessionStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1786
		{
			yyVAL.str = GlobalStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1796
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1802
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1806
		{
			yyVAL.statement = &Begin{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.statement = &Commit{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.statement = &Rollback{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1824
		{
			yyVAL.statement = &OtherRead{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1828
		{
			yyVAL.statement = &OtherRead{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1832
		{
			yyVAL.statement = &OtherRead{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1836
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1840
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1845
		{
			setAllowComments(yylex, true)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1849
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1855
		{
			yyVAL.bytes2 = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1859
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1865
		{
			yyVAL.str = UnionStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1869
		{
			yyVAL.str = UnionAllStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1873
		{
			yyVAL.str = UnionDistinctStr
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1878
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1882
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1886
		{
			yyVAL.str = SQLCacheStr
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1895
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1900
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1904
		{
			yyVAL.str = StraightJoinHint
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1909
		{
			yyVAL.selectExprs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1919
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1933
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1937
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1941
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1946
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1950
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1954
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1961
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1966
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1970
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1976
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1980
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1990
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1994
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2004
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2008
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2014
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2018
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2024
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2041
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2045
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2049
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2053
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2059
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2061
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2065
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2067
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2071
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2073
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2076
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2081
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2085
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2089
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2096
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2102
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2106
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2110
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2116
		{
			yyVAL.str = StraightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2122
		{
			yyVAL.str = LeftJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2126
		{
			yyVAL.str = LeftJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2130
		{
			yyVAL.str = RightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = RightJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2140
		{
			yyVAL.str = NaturalJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2144
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2154
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2158
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2164
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2168
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2173
		{
			yyVAL.indexHints = nil
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2177
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2181
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2185
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2190
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2194
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2200
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2204
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2208
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2212
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2216
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2220
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2224
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2230
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2234
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2240
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2244
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2258
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2262
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2266
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2274
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2278
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2282
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2286
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2292
		{
			yyVAL.str = IsNullStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2296
		{
			yyVAL.str = IsNotNullStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2300
		{
			yyVAL.str = IsTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2304
		{
			yyVAL.str = IsNotTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2308
		{
			yyVAL.str = IsFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2312
		{
			yyVAL.str = IsNotFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2318
		{
			yyVAL.str = EqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2322
		{
			yyVAL.str = LessThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2326
		{
			yyVAL.str = GreaterThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2330
		{
			yyVAL.str = LessEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2334
		{
			yyVAL.str = GreaterEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.str = NotEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2347
		{
			yyVAL.expr = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2351
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2357
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2361
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2365
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2377
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2381
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2399
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2403
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2463
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2467
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2471
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2475
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2483
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2505
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2553
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2557
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2561
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2577
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2581
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2585
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 498:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2589
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2593
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2597
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2601
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2647
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2679
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2683
		{
			yyVAL.str = BooleanModeStr
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2687
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2691
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2695
		{
			yyVAL.str = QueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2800
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2809
		{
			yyVAL.str = string("")
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2813
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2819
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2823
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2829
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2834
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2838
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2844
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2848
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2852
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2862
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2866
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2870
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2874
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2878
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2882
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.expr = &NullVal{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2901
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2905
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2910
		{
			yyVAL.exprs = nil
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2914
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2919
		{
			yyVAL.expr = nil
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2923
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2928
		{
			yyVAL.orderBy = nil
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2932
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2942
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2953
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2957
		{
			yyVAL.str = AscScr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2961
		{
			yyVAL.str = DescScr
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2966
		{
			yyVAL.limit = nil
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2974
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2978
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2983
		{
			yyVAL.str = ""
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2987
		{
			yyVAL.str = ForUpdateStr
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2991
		{
			yyVAL.str = ShareModeStr
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3004
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3008
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3012
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3017
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3021
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3025
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3032
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3036
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3040
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3044
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3049
		{
			yyVAL.updateExprs = nil
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3053
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3059
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3063
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3073
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3079
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3099
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3105
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3115
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3121
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3125
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3129
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3136
		{
			yyVAL.bytes = []byte("charset")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3143
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3147
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3151
		{
			yyVAL.expr = &Default{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3160
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3162
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3170
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.str = IgnoreStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3211
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3232
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3471
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3480
		{
			decNesting(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3485
		{
			forceEOF(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3490
		{
			forceEOF(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3494
		{
			forceEOF(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3498
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
